package sample_buttons

//
//internal main
//
//import (
//tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
//"log"
//"os"
//)
//
//import (
//"github.com/joho/godotenv"
//)
//
//var mainMenu = tgbotapi.NewReplyKeyboard(
//	tgbotapi.NewKeyboardButtonRow(
//		tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è"),
//		tgbotapi.NewKeyboardButton("üóí –ó–∞–ø–∏—Å—å"),
//	),
//)
//
//func main() {
//	err := godotenv.Load() // üëà load .env file
//	if err != nil {
//		log.Fatal(err)
//	}
//
//	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
//	if err != nil {
//		log.Panic(err)
//	}
//
//	bot.Debug = true
//
//	log.Printf("Authorized on account %s", bot.Self.UserName)
//
//	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//	// u - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤
//	u := tgbotapi.NewUpdate(0) // –∑–∞—á–µ–º
//	u.Timeout = 60             // –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–Ω–æ –∂–∏–≤–µ—Ç 60 —Å–µ–∫—É–Ω–¥
//
//	// –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥ u —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//	updates := bot.GetUpdatesChan(u)
//
//	// –≤ –∫–∞–Ω–∞–ª updates –ø—Ä–∏–ª–µ—Ç–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∏–ø–∞ Update
//	// –≤—ã—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
//	for update := range updates {
//		// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//		reply := "I do not process any messages except commands"
//		if update.Message == nil { // ignore any non-Message updates
//			if update.CallbackQuery != nil {
//				// Respond to the callback query, telling Telegram to show the user
//				// a message with the data received.
//				callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
//				if _, err := bot.Request(callback); err != nil {
//					panic(err)
//				}
//
//				// And finally, send a message containing the data received.
//				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Data)
//				if _, err := bot.Send(msg); err != nil {
//					panic(err)
//				}
//			} else {
//				continue
//			}
//		}
//
//		// –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç –∫–æ–≥–æ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ
//		//log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
//
//		// —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
//		if !update.Message.IsCommand() {
//			msg.Text = reply
//		}
//
//		if update.Message.IsCommand() {
//			// Extract the command from the Message.
//			switch update.Message.Command() {
//			case "list_of_commands":
//				msg.Text = "I am command"
//				msg.ReplyMarkup = mainMenu
//			case "check_recent_vacancies":
//				msg.Text = "I will show you recent internship positions"
//			case "start":
//				msg.Text = "This bot parses entry level vacancies from Ozon on hh"
//			case "info":
//				msg.Text = "Some instructions for user"
//			case "number_of_users":
//				msg.Text = "I calculate some stat of users" // available for me only
//				// –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
//			default:
//				msg.Text = "I don't know that command"
//			}
//		}
//
//		// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
//		bot.Send(msg)
//	}
//}
